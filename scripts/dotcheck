#!/bin/bash

# dotcheck helps to keep a backup of dotfiles in a given backup folder.

# By default the program reads its settings from the ~/.self_dotcheck file, if
# the file is not pressent and none is provided through the options the
# program halts.

# If the settings file is found the first line read is considered the backup
# folder and the rest is considered a list of dotfiles to consider.

# Without options the program will print only diagnostic information, if the
# dotfiles considered are both present in the backup folder and in home, and if
# they are the same.

# -F will force the backup dotfiles into the home folder. Each file in the
# home folder will be created as a hard link of the file in the backup folder.

# -u will update the files in the backup folder. Each file in the
# backup folder will be created as a hard link of the file in the home folder.

# -s FILE provides an alternate path for the settings file.



# Error codes
error_invalidOptions=1
error_missingSettingsFile=2

# Options values
settingsFile=~/.self_dotcheck
updateMode=false
forceMode=false

# Options parsing
params=$(getopt Fus: $*)
getoptStatus=$?
set -- $params

if [[ $getoptStatus != 0 ]]; then
	echo 'Invalid options' >&2
	exit $error_invalidOptions
fi

for param; do
	case "$param" in
		-s)
			# settings file
			shift
			settingsFile=$1
			shift
			;;
		-F)
			# Force copy from dotfiles to home
			forceMode=true
			shift
			;;
		-u)
			# Update dotfiles
			updateMode=true
			shift
			;;
		--)
			shift
			break
			;;
	esac
done


if [[ ! -f $settingsFile ]]; then
	echo "Settings file not found: $settingsFile" >&2
	exit $error_missingSettingsFile
fi

if [[ $forceMode = true && $updateMode = true ]]; then
	echo "Invalid double options"
	exit
fi

if [[ $forceMode = false && $updateMode = false ]]; then
	echo "diagnostics"
	exit
fi

if [[ $forceMode = true ]]; then
	echo "force mode"
	exit
fi

if [[ $updateMode = true ]]; then
	echo "update mode"
	exit
fi








exit

# Get all files except for the readme
dotfilePath="$HOME/zelf/dotfiles/"
homePath="$HOME/"
dotfileList=$(ls $dotfilePath | grep -v "^readme.md$")

for filename in $dotfileList; do
	dotFilename=$dotfilePath$filename
	homeFilename=$homePath.$filename
	
	if [[ $forceCopy == true ]]; then
		echo "Forcing copy!"
		exit 0
		
		ln -Fv $dotFilename $homeFilename
	else
		if [[ $dotFilename -ef $homeFilename ]]; then
			echo "matched $filename"
		else
			echo "override $filename"
			ln -F $homeFilename $dotFilename
		fi
	fi
done
