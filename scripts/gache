#!/bin/bash

read -d '' helpDoc <<"helpDoc"
NAME
    gache - helper script for git stash

SYNOPSIS
    gache [help]
    gache <n>
    gache save|index [<message>]
    gache apply|pop [<n>]
    gache drop <n>

DESCRIPTION
    gache
        Displays the the list of stashes.

    gache help|h
        Prints this help output and quits the program.

    TODO gache <n>
        Displays the changed files of the stash in the `<n>` position.

    gache save|s [<message>]
        Creates a new stash. All given parameters after `save` or `s` are
        used as the stash message. Afterwards the workspace is reset and
        all modifications are removed.

    TODO gache snap | n [<message>]
        Creates a new stash. All given parameters after `snap` or `n` are
        used as the stash message. The workspace is left untouched.

    TODO see if we can leave both stage and workspace without changes
    TODOgache index|i [<message>]
        Creates a stash only with the contents in the stage, afterwards the
        stage is reset. The workspace is not modified.

    gache apply|a [<n>]
        Aplies the stash in the `<n>` position. If no `<n>` is given the
        last stash is applied.

    gache pop|p [<n>]
        Pops the stash in the `<n>` position. If no `<n>` is given the last
        stash is popped.

    gache drop|d <n>
        Drops the stash in the `<n>` position.
helpDoc


# Error codes
error_invalidArguments=1
error_outOfBounds=2
error_stashError=3


# gache help|h - helpdoc
if [[ $1 =~ ^(help|h|-h|--help)$ ]]; then
	if [[ -t 0 ]]; then
		echo "$helpDoc" | less
	else
		echo "$helpDoc"
	fi
	exit 0
fi


# gache - list all stashes
if [[ $# -eq 0 ]]; then
	stashList=$(git --no-pager stash list)
	if [[ ${#stashList} -gt 0 ]]; then
		echo "$stashList"
	else
		[[ -t 1 ]] && echo "No stashes" >&2
	fi
	exit 0
fi


# gache save|s [<message>]
if [[ $1 == 'save' || $1 == 's' ]]; then
	shift
	message="$@"
	if [[ -n $message ]]; then
		git stash save --include-untracked -- "$message"
	else
		git stash --include-untracked
	fi

	if [[ $? -ne 0 ]]; then
		exit $error_stashError
	fi
	exit 0
fi


# TODO # gache index|i - stash only the indexed changes
# TODO # gache <n> - print details about a stash


# Rest of command work with format: gache <subcomand> <index>
subcommand=$1
stashIndex=$2

if [[ $# -gt 2 ]]; then
	[[ -t 1 ]] && echo 'Invalid arguments: `gache <subcommand> <n>` does not accept any more arguments' >&2
	exit $error_invalidArguments
fi

# Autozeroed is saved for subcommands where stashIndex is mandatory
autozeroed='false'
if [[ -z $stashIndex ]]; then
	stashIndex=0
	autozeroed='true'
fi

intRegex='^[0-9]+$'
if [[ ! $stashIndex =~ $intRegex ]]; then
	[[ -t 1 ]] && echo 'Invalid arguments: `gache <subcommand> <n>` second argument must be a positive integer' >&2
	exit $error_invalidArguments
fi

stashList=()
IFS=$'\n'
for item in $(git stash list); do
	stashList+=("$item")
done
unset IFS

if [[ $stashIndex -ge ${#stashList[@]} ]]; then
	[[ -t 1 ]] && echo 'Stash index out of bounds' >&2
	exit $error_outOfBounds
fi


# gache pop|p [<n>]
if [[ $subcommand == 'pop' || $subcommand == 'p' ]]; then
	echo "Popping: ${stashList[$stashIndex]}"
	git stash pop "stash@{$stashIndex}"
	exit 0
fi


# gache apply|a [<n>]
if [[ $subcommand == 'apply' || $subcommand == 'a' ]]; then
	echo "Applying: ${stashList[$stashIndex]}"
	git stash apply "stash@{$stashIndex}"
	exit 0
fi


# gache drop|d <n>
if [[ $subcommand == 'drop' || $subcommand == 'd' ]]; then
	if [[ $autozeroed == 'true' ]]; then
		[[ -t 1 ]] && echo 'Invalid arguments: `gache drop <n>` second argument is mandatory' >&2
		exit $error_invalidArguments
	fi

	echo "Dropping: ${stashList[$stashIndex]}"
	git stash drop "stash@{$stashIndex}"
	exit 0
fi


# Invalid subcommands
[[ -t 1 ]] && echo 'Invalid arguments: `gache <subcommand>` invalid subcommand' >&2
exit $error_invalidArguments


