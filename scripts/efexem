#!/bin/bash

# HELPDOC not being used because it breaks sublime syntax highlight
read -d '' helpdoc << "HELPDOC"
HELPDOC

# efexem helps to compare a list of files between two locations by printing
# a status message that outlines if the files are the same, have equal
# content, are diferent, or are missing from any of the locations.
#
# The script can also overwrite one of the set of files with the
# corresponding files of the other location.
# 
# Finaly the script can help check the diferences between unmatching files
# by opetning a compare tool.
#
#
# The of the script name comes from the three letters used for the status:
# F, X, and M.
#
# 
# The script can be provided, either by options or through an input file,
# one of the following alternatives:
# * Two directories and a list of files. The script will search for each of
#   the provided files, relative to each of the directories, and compare
#   them.
# * Two directories and a list of file pairs. The script will look in the
#   first directory for the first file of the pair, relative to the 
#   directory; and in the second directory for the second file of the pair.
#   Both files are then compared.
# * A list of file pairs with absolute paths. The script will compare 
#   each of the files against it's pair.
#
# 
# The following options are available:
# 
# -b <directory>
#    Defines the backup directory. This parameter is required unless an
#    input file is specified with -s, or absolute file pairs are provided
#    with -p.
# 
# -d <directory>
#    Defines the deploy directory. This paramenter is required unless an
#    input file is specifiued with -s, or absolute file pairs are provided
#    with -p.
# 
# -v 
#    Enables verbose mode, printing additional information about the
#    options and input file being read.
# 
# -p
#    Enables pairs mode. In this mode file pairs are provided instead of a
#    file list. Each file in the pair is compared against the other one.
#    If an odd amount of files are provided the program will halt. If the
#    -b or -d options are used, the first file in the pair will be
#    considered relative to the backup directory; the second file in the
#    pair will be considered relative to the deploy directory. When used
#    without -b or -d options, the first file in the pair is considered
#    the backup, the second the deploy.
#
# -B - THIS PART IS CONFUSING, -B MEANS THAT BACKUP FILES WILL SURVIVE? OR
#    FILES WILL BE BACKED UP (DESTROYING BACKUP)?
#
#    Makes the script create hardlinked files from the deploy directory to
#    its counterpart in the backup directory. All matching files in the
#    backup directory will be overwritten.
#
# -D
#    Makes the script create hardlinked files from the backup directory to
#    its counterpart in the deploy directory. All matching files in the
#    deploy directory will be overwritten.
#
# -c
#    Will run the compare command with any files found with different
#    content. If all files match only status information will be printed.
#
# -s <file>
#    Provides to the script an input file to define the directories and
#    files to compare.
#
#
# The input file provided with the -s option follows this format:
#
#    # Lines can be commented by starting with the '#' symbol
#    # Full lines are commented, a '#' after the first character will not
#    # start a comment mid-line.
#    
#    # Blocks are started with the '@' symbol. The text afterward is only
#    # used to to print in the script output for human consumption.
#    @ First block
#    -d /path/to/deploy/directory/
#    -b /bath/to/backup/directory/
#    
#    fileOne
#    fileTwo
#    fileThree
#    
#    @ Second block
#    -d /path/to/other/deploy/directory/
#    -b /bath/to/other/backup/directory/
#    
#    # enables pair mode
#    -p
#    backupFileOne
#    deployFileOne
#    
#    backupFileTwo
#    deployFileTwo
#    
#    @ Third block
#    # With only -p each file is on an absolute path
#    -p
#    
#    /path/to/backupFileOne
#    /path/to/deployFileOne
#    
#    /path/to/backupFileTwo
#    /path/to/deployFileTwo



#
#
# =========================================================================
# =========================================================================
# =========================================================================
# =========================================================================
# =========================================================================
# 
#
#
# dotcheck helps to keep a backup of dotfiles in a given backup folder.
# 
# The program reads its settings from the ~/.self_dotcheck file by default.
# A settings file can be provided with the -s option alternatively.
# 
# The program halts if no settings file is provided or found by default.
# 
# The settings file follows this format:
# Lines can be disabled as comments by starting them with "#"
# The first line is read as the backup folder.
# Any subsequent line is a dotfile to consider.
# 
# Without options the program will print only status information for each
# dotfile defined in the settings file. For each file two letters will be
# displayed, the first for its status in home, the second in backup:
# MM - missing on both places
# MF - missing in home, present in backup
# FM - missing in backup, present in home
# FF - Present and both files are hardlinked
# Ff - Present and both files have the same content
# FX - Present and both files have different content


# The following options are available:
# 
# -F will force the backup dotfiles into the home folder. Each file in the
# home folder will be created as a hard link of the file in the backup
# folder.
# 
# -u will update the files in the backup folder. Each file in the
# backup folder will be created as a hard link of the file in the home
# folder.
# 
# -c will run the compare command with any files found with different
# content. If all files match only status information will be printed.
# 
# -s FILE provides an alternate path for the settings file.


# Setup for a new machine:
# Run it once with the settings file from the backup location. This will
# copy all files from backup to home:
# > dotcheck -F -s ~/self/dotfiles/self_dotcheck
# 
# Afterwards just run it to check status:
# > dotcheck
# 
# When files are different run in compare mode to solve diferences
# > dotcheck -c
# 
# To update the backup just in update mode and then save the backup
# > dotcheck -u




# Error codes
error_invalidOptions=1
error_missingSettingsFile=2
error_invalidBackupLocation=3
error_noDotfiles=4

# Options values
settingsFile=~/.self_dotcheck
compareMode='false'
updateMode='false'
forceMode='false'

# Options parsing
params=$(getopt Fucs: $*)
getoptStatus=$?
set -- $params

if [[ $getoptStatus != 0 ]]; then
	echo 'Invalid options' >&2
	exit $error_invalidOptions
fi

for param; do
	case "$param" in
		-s)
			# settings file
			shift
			settingsFile=$1
			shift
			;;
		-c)
			compareMode='true'
			shift
			;;
		-F)
			# Force copy from dotfiles to home
			forceMode='true'
			shift
			;;
		-u)
			# Update dotfiles
			updateMode='true'
			shift
			;;
		--)
			shift
			break
			;;
	esac
done

# Checks for options before we start
if [[ ! -f $settingsFile ]]; then
	echo "Settings file not found: $settingsFile" >&2
	exit $error_missingSettingsFile
fi

if [[ $forceMode = 'true' && $updateMode = 'true' ]]; then
	echo 'Invalid options: -F and -u cannot be used simultaneously'
	exit $error_invalidOptions
fi

if [[ $compareMode = 'true' && ( $forceMode = 'true' || $updateMode = 'true' ) ]]; then
	echo 'Invalid options: -c cannot be used along -F nor -u'
	exit $error_invalidOptions
fi


# Reading settings
backupLocation=''
dotfiles=()

IFS=$'\n'
for currentLine in $(cat $settingsFile); do
	
	# Checking for empty lines
	trimmed=$(echo $currentLine | tr -d [[:space:]])
	if [[ $trimmed = '' ]]; then
		continue
	fi
	
	# Checking for comments
	if [[ ${trimmed:0:1} = '#' ]]; then
		continue
	fi
	
	# First line is always the backup location
	if [[ $backupLocation = '' ]]; then
		backupLocation=$currentLine
		# Expanding relative paths
		eval backupLocation=$backupLocation
		continue
	fi
	
	# Rest of lines are dotfiles
	dotfiles+=($currentLine)
done
unset IFS


# Checking for valid settings
if [[ ! -d $backupLocation ]]; then
	echo "Invalid backup location: $backupLocation" >&2
	exit $error_invalidBackupLocation
fi

if [[ ${#dotfiles[@]} -le 0 ]]; then
	echo "No dotfiles found in settings" >&2
	exit $error_noDotfiles
fi


# Checking backup location for ending slash
stringLength=$((${#backupLocation}-1))
lastCharacter=${backupLocation:$stringLength:1}
if [[ $lastCharacter = '/' ]]; then
	backupLocation=${backupLocation:0:$stringLength}
fi


# Status and compare mode
if [[ $forceMode = 'false' && $updateMode = 'false' ]]; then
	
	IFS=$'\n'
	for dotfile in ${dotfiles[@]}; do
		homeDotfile=$HOME/.$dotfile
		backupDotfile=$backupLocation/$dotfile
		
		homeStatus='M'
		if [[ -f $homeDotfile ]]; then
			homeStatus='F'
		fi
		
		backupStatus='M'
		if [[ -f $backupDotfile ]]; then
			backupStatus='F'
		fi
		
		# If both files where found
		if [[ $homeStatus$backupStatus = 'FF' ]]; then
			# TODO check here that if one file is a symbolic link it will still say true
			# we probably just need to check for symbolic link in the backup location
			# otherwise the content is not really backed up to git
			
			if [[ ! $homeDotfile -ef $backupDotfile ]]; then
				# Files are not hardlinked, check contents
				homeHash=$(md5 -q "$homeDotfile")
				backupHash=$(md5 -q "$backupDotfile")
				
				if [[ $homeHash = $backupHash ]]; then
					backupStatus='f'
				else
					backupStatus='X'
				fi
			fi
		fi
		
		echo "$homeStatus$backupStatus $dotfile"
		
		# Compare mode
		if [[ $compareMode = 'true' && $backupStatus = 'X' ]]; then
			echo "Comparing $dotfile"
			compare -title1:"home:$homeDotfile" $homeDotfile -title2:"backup:$backupDotfile" "$backupDotfile"
			exit
		fi
		
		continue
		
	done
	unset IFS
	
	exit
fi


# Update and force modes
IFS=$'\n'
for dotfile in ${dotfiles[@]}; do
	homeDotfile=$HOME/.$dotfile
	backupDotfile=$backupLocation/$dotfile
	
	# Running update mode
	if [[ $updateMode = 'true' ]]; then
		if [[ -f $homeDotfile ]]; then
			echo "Updating $backupDotfile"
			ln -f "$homeDotfile" "$backupDotfile"
		else
			echo "Missing $homeDotfile"
		fi
		continue
	fi
	
	
	# Running update mode
	if [[ $forceMode = 'true' ]]; then
		if [[ -f $backupDotfile ]]; then
			echo "Forcing $homeDotfile"
			ln -f "$backupDotfile" "$homeDotfile"
		else
			echo "Missing $backupDotfile"
		fi
		continue
	fi
	
done
unset IFS

