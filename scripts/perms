#!/usr/bin/env ruby

require 'optparse'

options = {}

# Setting up available options

opts = OptionParser.new
opts.banner = "#{opts.banner} [<target>]"
opts.separator ''
opts.separator <<SEP
Perms prints or sets the permitions of files and directores. If used 
without any option or target the permitions of the visible items in
the current directory are displayed.

If a <target> is provided and it is a file, its permitions will be
displayed, if it is a directory the permitions of its contents will be
displayed.

If <target> is a folder the option --self can be used to display the
permitions of the folder itself, instead of their contents. Option
--contents can be used along with --self to display both the <target>
folder and its contents.

Options --files and -dirs can limit the displayed items to only files
or directories. By default both are shown. Using option --all displays
also hidden files and/or folders.

Using option --set_files or --set-dirs will modify the permitions of
any files and/or directories that are also displayed. Option --set-both
will modify the permitions of all items displayed. All provided modes
should in octal form.
SEP
opts.separator ''
opts.separator 'Options:'

opts.on('-f', '--files', 'Displays only files.') do
	options[:use_files] = true
end

opts.on('-d', '--dirs', 'Displays only directories.') do
	options[:use_dirs] = true
end

opts.on('-a', '--all', 'Also displays hidden files and/or directories.') do
	options[:use_all] = true
end

opts.on('-F', '--set-files MODE', 'Sets MODE in all displayed files.') do |mode|
	options[:mode_files] = mode
end

opts.on('-D', '--set-dirs MODE', 'Sets MODE in all displayed directories.') do |mode|
	options[:mode_dirs] = mode
end

opts.on('-B', '--set-both MODE', 'Sets MODE in all displayed files and directories.') do |mode|
	options[:mode_files] = mode
	options[:mode_dirs] = mode
end

opts.on('-s', '--self', 'If the target is a directory, also displays and handles it.') do
	options[:use_self] = true
end

opts.on('-c', '--contents', 'If the --self option is used.') do
	options[:use_contents] = true
end

opts.on('-r', '--recursive', 'Enters recursively into subdirectories.') do
	options[:recursive] = true;
end

opts.on('-y', '--dry-run', 'Prints all changes that would be made but no permitions are actually changed.') do |dry_run|
	options[:dry_run] = true
end

opts.on('-g', '--color', 'Displays colored output.') do
	if STDOUT.tty?
		options[:colorize] = true
	end
end

opts.on('-v', '--verbose', 'When setting modes, see all unchanged entries.') do
	options[:verbose] = true
end

opts.separator ''

opts.on_tail('-h', '--help', 'Displays this help message and exits.') do
	options[:help] = true
end


# Parsing and handling help

begin
	opts.parse!
rescue OptionParser::ParseError
	warn $!.message
	warn 'use --help for more information'
	exit 1
end

if options[:help]
	puts opts.help
	exit
end

# No target means to use current directory
ARGV << '.' if ARGV.empty?

# No files or dirs options means both
if not options[:use_files] and not options[:use_dirs]
	options[:use_files] = true
	options[:use_dirs] = true
end

# Check provided modes
if options[:mode_files] or options[:mode_dirs]
	modes = [options[:mode_files], options[:mode_dirs]]
	modes.compact!
	modes.each do |mode|
		if not mode.match(/^[0-7]+$/) or mode.to_i(8) > 0777
			warn "Invalid mode #{mode}"
			exit 2
		end
	end
end

# All modes ok, so we get them to ints
options[:mode_files] = options[:mode_files].oct if options[:mode_files]
options[:mode_dirs] = options[:mode_dirs].oct if options[:mode_dirs]

# Hash for errors encountered
errors = {}

# Array of all entries that will be handled
entries = []

# Each target passed is added to the entries
ARGV.each do |target|
	if not File.exists? target
		warn "'#{target}' no such file or directory"
		errors[:missing_target] = true
		next
	end
	
	# Do we have a file?
	if File.file? target and options[:use_files]
		entries << target
		next
	end
	
	# Not a file, we have a directory
	# For directories we keep a list of the directories we have to go
	# through, starting with the target itself
	dirs_to_check = ['.']
	
	# If self is used, the directory is an entry itself
	if options[:use_self]
		entries << target
		
		# We only continue with the directory contents if
		# we use recursive or contents
		if not options[:use_contents] and not options[:recursive]
			next
		end
	end
	
	# If using recursive we add to the list all subdirectories
	if options[:recursive]
		glob_params = ['**/']
		glob_params << File::FNM_DOTMATCH if options[:use_all]
		Dir.chdir(target) do |path|
			dirs_to_check += Dir.glob(*glob_params)
		end
	end
	
	# Using the list of dirs to check, we go through each of them
	# and all all apropiate contents to entries
	glob_params = ['*']
	glob_params << File::FNM_DOTMATCH if options[:use_all]
	dirs_to_check.each do |subdir_target|
		# Clean up the path to check
		dir_parts = [target, subdir_target]
		dir_path = File.join(*dir_parts)
		
		# For each dir we keep the contents as entries
		Dir.chdir(dir_path) do |path|
			dir_contents = Dir.glob(*glob_params)
			dir_contents.delete('.')
			dir_contents.delete('..')
			
			# Cleanup of files or dirs, depending on options
			dir_contents.select! do |item|
				next true if options[:use_files] and File.file? item
				next true if options[:use_dirs] and File.directory? item
				false
			end
			
			# Add the leading path to properly add them as entries
			dir_parts.delete('.')
			dir_contents.map! do |value|
				File.join(*dir_parts, value)
			end
			
			entries += dir_contents
		end
	end

end # each

entries.each do |entry|
	stats = File.stat(entry)
	perms = sprintf('%o', stats.mode)
	perms = perms[-3, 3]
	new_perms = nil
	
	# Colorization values
	entry_color = ''
	end_color = ''
	set_color = ''
	same_color = ''
	if options[:colorize]
		end_color = "\033[0m" # exit code
		set_color = "\033[1;31m" # bold red
		same_color = "\033[1;32m" # bold green
	end
	
	# Check if file or dir to modify permitions
	if File.file? entry
		new_perms = options[:mode_files] if options[:mode_files]
	else
		new_perms = options[:mode_dirs] if options[:mode_dirs]
		# Blue for dirs
		entry_color = "\033[1;34m" if options[:colorize]
	end
	
	if new_perms
		new_perms_string = new_perms.to_s(8)
		if new_perms_string != perms
			File.chmod(new_perms, entry) if not options[:dry_run]
			puts "#{set_color}#{perms} -> #{new_perms_string}#{end_color} #{entry_color}#{entry}#{end_color}"
		else
			puts "#{same_color}#{perms} *#{end_color} #{entry_color}#{entry}#{end_color}"
		end
	else
		puts "#{perms} #{entry_color}#{entry}#{end_color}"
	end
end

# Bye bye
exit 3 if errors.length > 0
exit


#1 poner en el help que sin argumentos, el cwd es el target
#2 poner en el help que el --use-both es el default de los 3
#3 «# Parsing and handling help» comentario inutil
#4 "-g" por qué eso para colores? -> -C
#5 en la sección con comentario «# No files or dirs options means both» se prenden, agregar que ya no haga nada si se usó el --use-both
#6 /^[0-7]+$/ es una mala regexp, sólo pueden ser 3-4 dígitos, explícitamente menciónalos -> {1, 3}
#7 crea constantes significativa, para sustituir el 'exit 1' y 'exit 2', y documenta eso en algún lado
#9 tal vez hacer la conversión a oct desde la definición de -F, -B, -D
#10 remove trailing whitespace -> 238
#11 line 175, dirs_to_check += Dir.glob(*glob_params) ====> dirs_to_check.push( Dir.glob(*glob_params) )
#12 Colors mover a una helper function
#15 exit if errors.empty?; exit TOO_MANY_ERRORS
#16, permitions => permissions (spellchecker)
#17 All provided modes should in octal form. =>  All modes provided should be in octal form.
# -> All moves are expected to be in octal notation



