#!/bin/bash

read -d '' helpDoc <<"helpDoc"
Commits the current index.

A commit message is determined in the following order:

If any content is piped-in it is used as the commit message. This will
override any parameters.

If parameters are present these are used as the commit message.

If the root folder of the current git repository contains a
`.gommit_message` file it is used as commit message.

If the `SELF_GOMMIT_MESSAGE_FILE` enviroment variable is defined it is
used as path to a file that is read and used as commit message.

When a file is read as commit message, the file is read until a
`GOMMIT_MESSAGE_END` line is found, any content afterwards is ignored.

If none of the previous applies, `git commit` is simply invoked.
helpDoc


if [[ $1 = '-h' || $1 = '--help' ]]; then
	echo "$helpDoc" >&2
	exit
fi

# Piped in
if [[ ! -t 0 ]]; then
	git commit --edit --file <(cat)
	exit
fi

# Message in parameters
if [[ $# != 0 ]]; then
	message="$@"
	git commit --edit --message "$message"
	exit
fi

# Use local .gommit_message
gitRoot=$(git rev-parse --show-toplevel)
messageFile="$gitRoot/.gommit_message"
if [[ ! -e "$messageFile" ]]; then # file exists
	# or enviroment variable
	messageFile="$SELF_GOMMIT_MESSAGE_FILE"
fi

# Check for message file
if [[ -n "$messageFile" ]]; then # non-zero string
	if [[ -e "$messageFile" ]]; then # file exists
		delimiter='GOMMIT_MESSAGE_END'
		tmpMessagePath='/tmp/gommit/'
		mkdir -p "$tmpMessagePath"
		tmpMessageFile=$(mktemp "${tmpMessagePath}gommit_msg_XXXX")

		# sed will output all lines until the delimiter
		# -n no line is output by default
		# -e first command looks for string and quits
		# -e second command just prints the line
		cat "$messageFile" \
		| sed -E -n -e "/$delimiter/ q" -e 'p' \
		> "$tmpMessageFile"
		git commit --edit --file "$tmpMessageFile"
		exit
	else
		echo "`$messageFile` is defined but does not point to a file" >&2
	fi
fi


# No parameters
git commit
