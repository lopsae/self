#!/bin/bash

# setback keeps two directories syncronized by creating hardlinked files
# between them. A file can be provided that contains sets of the two
# locations and the files in these to keep syncronized. Generaly the first
# folder is called the backup directory, the second one the deploy
# directory.


# The -s FILE option must be provided to define the settings file to use.
# 
# Without further options the program will print only status information.
# For each file defined in the settings file two letters will be displayed,
# the first for its status in backuo, the second in deploy:
# 
# MM - missing on both folders
# MF - missing in backup, present in deploy
# FM - missing in deploy, present in backup
# FF - Present in both folders and matching
# FX - Present in both folders and different


# The script also accepts the following options:
# 
# -F will force the backup files into the deploy folder. In the deploy
# folder a hardlinked file will be created for each file in the backup
# folder.
# 
# -U will update the deploy files into the backup folder. In the backup
# folder a hardlinked file will be created for each file in the deploy
# folder.



########################################
# Default values
########################################

# Options values
settingsFile=''
updateMode='false'
forceMode='false'

# Error codes
error_invalidOptions=1
error_missingSettingsFile=2



########################################
# Options parsing
########################################

params=$(getopt FUs: $*)
getoptStatus=$?
set -- $params

if [[ $getoptStatus != 0 ]]; then
	echo 'Invalid options' >&2
	exit $error_invalidOptions
fi

for param; do
	case "$param" in
		-s)
			# settings file
			shift
			settingsFile=$1
			shift
			;;
		-F)
			# Force copy from dotfiles to home
			forceMode='true'
			shift
			;;
		-U)
			# Update dotfiles
			updateMode='true'
			shift
			;;
		--)
			shift
			break
			;;
	esac
done

# Options validations before we start

if [[ $settingsFile = '' ]]; then
	echo 'Settings file not provided' >&2
	exit $error_missingSettingsFile
fi

if [[ ! -f $settingsFile ]]; then
	echo "Settings file not found: $settingsFile" >&2
	exit $error_missingSettingsFile
fi

if [[ $forceMode = 'true' && $updateMode = 'true' ]]; then
	echo 'Invalid options: -F and -U cannot be used simultaneously'
	exit $error_invalidOptions
fi



########################################
# Reading the settings file
########################################

backupLocation=''
deployLocation=''
readStage='backupDir' # -> deployDir -> files -> backupDir

IFS=$'\n'
for settingsLine in $(cat $settingsFile); do
	
	# Checking for empty lines or comments
	trimmed=$(echo $settingsLine | tr -d [[:space:]])
	if [[ $trimmed = '' ]]; then
		continue
	fi
	if [[ ${trimmed:0:1} = '#' ]]; then
		continue
	fi
	
	# Trimming any edge whitespace
	line="$settingsLine"
	leading="${line%%[![:space:]]*}"
	trailing="${var##*[![:space:]]}"
	line="${line#"$leading}"
	line="${line%"$trailing}"
	settingsLine="$line"
	
	# Saving if we have a block separator
	if [[ ${settingsLine:0:1} = '@' ]]
		isBlockSeparator='true'
		blockSeparatorMessage="${settingsLine#'@'}"
	else
		isBlockSeparator='false'
	fi
	
	# TODO jump block could be handled here, and in the case we just jump
	# everything unless we are already in a block, instead of having the
	# jumpBlock stage
	
	# Parse and check depending on the stage
	case "$readStage" in
		'backupDir')
			if [[ ${settingsLine:0:1} = '~' ]]; then
				# Fixing ~ prefix
				$settingsLine="$HOME/${settingsLine#'~'}"
			fi
			if [[ -d "$settingsLine" ]]; then
				backupLocation="${settingsLine%'/'}"
				readStage='deployDir'
				continue
			else
				readStage='jumpBlock'
				echo 'Invalid backup location found: $settingsLine' >&2
				continue
			fi
			;;
		'deployDir')
			if [[ ${settingsLine:0:1} = '~' ]]; then
				# Fixing ~ prefix
				$settingsLine="$HOME/${settingsLine#'~'}"
			fi
			if [[ -d "$settingsLine" ]]; then
				deployLocation="${settingsLine%'/'}"
				readStage='files'
				continue
			else
				readStage='jumpBlock'
				echo 'Invalid backup location found: $settingsLine' >&2
				continue
			fi
			;;
		'jumpBlock')
			if [[ $isBlockSeparator = 'true' ]]; then
				echo "Starting block: $blockSeparatorMessage"
				readStage='backupDir'
			fi
			continue
			;;
		'files')
			if [[ $isBlockSeparator = 'true' ]]; then
				echo "Starting block: $blockSeparatorMessage"
				readStage='backupDir'
				continue
			fi
			# The rest of the logic for files is after the case statement
			;;
	esac
	
########################################
# File linking and status logic
########################################
	
	# If we reached this place we have a file in hands
	$backupFilePath="$backupLocation/$settingsLine"
	$deployFilePath="$deployLocation/$settingsLine"
	
	# Running status mode
	if [[ $forceMode = 'false' && $updateMode = 'false' ]]; then
		backupStatus='M'
		if [[ -f "$backupFilePath" ]]; then
			backupStatus='F'
		fi
		
		deployStatus='M'
		if [[ -f "$deployFilePath" ]]; then
			deployStatus='F'
		fi
		
		# If both files where found
		if [[ $deployStatus = 'F' && $deployStatus = 'F' ]]; then
			# TODO check here that if one file is a symbolic link it will still say true
			# we probably just need to check for symbolic link in the deploy location
			# otherwise the content is not really backed up to git
			if [[ ! "$backupFilePath" -ef "$deployFilePath" ]]; then
				deployStatus='X'
			fi
		fi
		
		echo "$backupStatus$deployStatus $dotfile"
		continue
	fi
	
	
	# Running update mode, backup gets overwritten
	if [[ $updateMode = 'true' ]]; then
		if [[ -f "$deployFilePath" ]]; then
			echo "Forcing $backupFilePath"
			# ln -f "$deployFilePath" "$backupFilePath"
		else
			echo "Missing $deployFilePath"
		fi
		continue
	fi
	
	
	# Running force mode, deploy gets overwriten
	if [[ $forceMode = 'true' ]]; then
		if [[ -f "$backupFilePath" ]]; then
			echo "Updating $deployFilePath"
			# ln -f "$backupFilePath" "$deployFilePath"
		else
			echo "Missing $backupFilePath"
		fi
		continue
	fi
	
done
unset IFS

