#!/bin/bash

# Finds with gick a file from the modified files with a workspace status.
# With it, runs the giff command, followed with the gadd command for the
# same file.

# If run without any parameters it will pick the first available unstaged
# file.


# Checking for patching -k option
threeWayPatch='false'
if [[ $1 == '-k' ]]; then
	threeWayPatch='true'
	shift
fi

# Checking for no options case
if [[ $# -eq 0 ]]; then
	fileFound=$(gick -xw "." 2> /dev/null)
	if [[ $? != 0 ]]; then
		echo 'No more unstaged files' >&2
		exit 1
	fi
else
	fileFound=$(gick -xw "$@" 2> /dev/null)
	if [[ $? != 0 ]]; then
		echo 'No file found' >&2
		exit 1
	fi
fi


# Checking status
stageStatus=${fileFound:0:1}
workspaceStatus=${fileFound:1:1}
fileName=${fileFound:3}

if [[ $workspaceStatus == '?' ]]; then
	echo "untracked '$fileName'"
	read -p 'Intent to add? (y) ' intentConfirm
	if [[ "$intentConfirm" != 'y' ]]; then
		echo 'Aborted' >&2
		exit 1
	fi

	gadd -Np "$fileName"
fi


# Three way patch mode
if [[ $threeWayPatch == 'true' ]]; then
	backupPath="/tmp/gda/"
	mkdir -p "$backupPath"

	# Creating a time stamp for the file
	# year, month, day, hour, minute, second
	timeStamp=$(date +"%Y%m%d_%H%M%S")
	fileBaseName=$(basename "$fileName")

	workspaceFileName="${backupPath}${timeStamp}_workspace_${fileBaseName}_XXXX"
	stageFileName="${backupPath}${timeStamp}_stage_${fileBaseName}_XXXX"
	headFileName="${backupPath}${timeStamp}_head_${fileBaseName}_XXXX"

	workspaceFileName=$(mktemp "$workspaceFileName")
	stageFileName=$(mktemp "$stageFileName")
	headFileName=$(mktemp "$headFileName")

	cp "$fileName" "$workspaceFileName"
	cp "$fileName" "$stageFileName"
	git cat-file blob "HEAD:$fileName" > "$headFileName"

	compare -3 -wait \
		-title1:"head" -title2:"stage" -title3:"workspace" \
		"$headFileName" "$stageFileName" "$workspaceFileName"

	read -p 'Stage? (y) ' stageConfirm

	if [[ "$stageConfirm" != 'y' ]]; then
		echo 'Aborted' >&2
		exit 1
	fi

	# Copy stage version to workspace and stage
	cp "$stageFileName" "$fileName"
	gadd -p "$fileName"

	# Restore workspace version to worspace
	cp "$workspaceFileName" "$fileName"
fi


# Normal diff
echo 'Waiting for diff tool to return...'
giff -p "$fileName"

read -p 'Stage? (y) ' stageConfirm

if [[ "$stageConfirm" != 'y' ]]; then
	echo 'Aborted' >&2
	exit 1
fi

gadd -p "$fileName"
echo
git status --short --branch --untracked-files

